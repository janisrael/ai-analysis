version: '3.8'

services:
  # AI Avatar Assistant Main Application
  ai-avatar:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_avatar_assistant
    restart: unless-stopped
    ports:
      - "5555:5555"  # Widget API
      - "8080:8080"  # Web Interface
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///data/ai_avatar.db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - WIDGET_API_PORT=5555
      - WEB_PORT=8080
      - VOICE_ENABLED=true
      - ANALYTICS_ENABLED=true
      - COLLABORATION_ENABLED=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - /tmp/.X11-unix:/tmp/.X11-unix:rw  # For GUI if needed
    depends_on:
      - redis
      - postgres
    networks:
      - ai_avatar_network
    healthcheck:
      test: ["CMD", "python", "scripts/health-check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: ai_avatar_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - ai_avatar_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: ai_avatar_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_avatar
      POSTGRES_USER: ai_assistant
      POSTGRES_PASSWORD: secure_password_change_me
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai_avatar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_assistant -d ai_avatar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ai_avatar_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - ai-avatar
    networks:
      - ai_avatar_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_avatar_celery
    restart: unless-stopped
    command: celery -A core.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///data/ai_avatar.db
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
    depends_on:
      - redis
      - postgres
    networks:
      - ai_avatar_network
    healthcheck:
      test: ["CMD", "celery", "-A", "core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery beat scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_avatar_scheduler
    restart: unless-stopped
    command: celery -A core.celery_app beat --loglevel=info --schedule=/app/data/celerybeat-schedule
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///data/ai_avatar.db
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - celery-worker
    networks:
      - ai_avatar_network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_avatar_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai_avatar_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai_avatar_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_me
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ai_avatar_network
    profiles:
      - monitoring

# Networks
networks:
  ai_avatar_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local